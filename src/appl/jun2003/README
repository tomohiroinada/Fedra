This is an example of data processing directory 
with the input card files:

jun2003_data_set.def  - in this file are defined:
			- where is the data set list
			- where to get input parameters per each data element
			- where to put output data

jun2003_runs.lst      - data set list, here should be listed all 
			data files to be processd together (i.e for 1 
			brick scanning)

	The format of this file:

plateID	pieceID		/data/file/name/run.root  Flag

	here: 	plateID - the consequtive plate number (1-57)
		pieceID - the number of data piece INSIDE the 
			  current plate. Data of one piece must have the 
			  same set of parameters.
			  For example data of several runs could be 
			  combined into one piece if them have exactly the same 
			  set of parameters (including affine transformations).

		from plateID and pieceID will be constracted the standard 
		names used for input and output files during analysis:
		01_001 - for plate 1, piece 1

		Flag	=0 - do not use this piece
			=1 - use this piece

default.par  - default parameters for data piece (see comments inside the file)

./par  - the parameters directory.
	 Here should be created parameter files per each data 
	 piece: see ./par/09_001.par as an example.
	 To create a group of *.par files one could use script makepar.C as:
	 > root makepar.C
	 Of cause the script should be preliminary castomised according to 
	 your dataset.

Data processing scheme (assuming that the data are converted by rwc2edb):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0) check the quality of raw data you are going to process:

	root> .x check_raw.C   - the script could be customized according to data specifics

	define the Zbaze: the z-distance between up and down segments,
	according to this value should be setted later cards  ZLAYER 1 and ZLAYER 2 in 
	the default.par

1) create the file XXXX_data_set.def and correspondent directory structure

2) create the XXXX_runs.lst with list of data files.
	Note that it is convenient to select from the inition which 
	plate (data piece) will be the reference one - all other data 
	pieces will be transformated to the coordinate system of this one.
	This data piece should be on BOTTOM of the list:
	
	......................
	2  1 ......run4.root 1
	1  2 ......run3.root 1   - this run may have different affine transformations
	1  1 ......run2.root 1   - here run1 and run2 were taken with same plate setting, 
	1  1 ......run1.root 1     them could be combined into the same piece (01_001.par)

	In this example all data after the alignment will be transformed to 
	coordinate system of piece 01_001.
	So if the scannig started from the first plate, the list 
	should be updated by the data of consequtive plates at the top.

3) create the parameters files per each data piece in the directory ./par 
   (use script makepar.C)
   as it is done in jun2003/par. All common settings could be combined together 
   into dedicated file(s) - default.par in our example.
   For all parameters used the last setting.
   All cuts will be applied one by one in the same sequence as them setted.

4) CCD spots elimination:
	> recset ccd XXXX_data_set.def 
	This procedure will update par/*.par files with the XCUT lines removing 
	the CCD defects. Each line remove all segments on the 1x1 micron area in 
	view coordinates.
	
	Note that at each execution recset write in the par/ directory 
	also the files named like 09_001.par.C containing the applied cuts 
	in root script format. So one can check the cuts from the interactive 
	root session

5) Linking: 
      >	recset l XXXX_data_set.def
	
	With this instruction for all pieces listed in runs.lst with flag 1
	will be performed up/down linking. Output root files with "couples" 
	trees go to the ./data directory. Them could be used to check the 
	quality of the procedure and for the individual tuning of parameters, 
	especially the SHRINK.

	After linking the SHRINK parameters in par/*.par  will be 
	AUTOMATICALLY UPDATED

	If shrinkage correction (printed on the screen) is significantly 
	different from 1 it is better to repeate 
	recset l ...
	so the corrected parameters will be used for next iteration


	If data do not linked at all the  most probable reason is that:
	ZLAYER 1 0   0 0
	ZLAYER 2 214 0 0 

	should be:

	ZLAYER 2 0   0 0
	ZLAYER 1 214 0 0 
	

5a) Angular offset correction (optional):
	recset ang XXXX_data_set.def

	This function will read data/* file and based on linked tracks 
	will try to correct microtrack-basetrack angular offsets (if any).
	It could be usefull for havy distorted emulsions.
	Cards 	"AFFTXTY 1 .."  and "AFFTXTY 2 .." will be updated in par/*.par files
	
6) Alingment:
	> recset a XXXX_data_set.def

	this procedure will search plate to plate offset in the limits 
	defined by OFFSET parameter and then calculate the affine 
	transformation and UPDATE the par/*.par files with new cards
	AFFXY 0 ...

	Note that alingment is an expensive procedure especially if the 
	possible offset is big (for example >~ 500 micron). It is not 
	necessary to use all data volume for alingment: 1000-5000 tracks/pattern 
	is quite enough. To reduce number of tracks the cuts could be used:
	ICUT 0 .....
	XCUT 0 .....
	The procedure read base tracks from files produced in 5) and apply 
	the defined cuts for them.
	So for the first iteration alignment could be done for small 
	data subsets with the big OFFSET; 
	the correct affine parameters will be automatically updated 
	at the end of the correspondent par file;
	then the procedure could be repeated 
	with the full data set and small OFFSET.
	
	Note that alignment could be done for any number of plates >=2.
	The most economic way to do it is by couples: 2->1; 3->2; etc.

	If the alignment is failed the most probable reason that the plate 
	Z coordinates should encrease to opposit direction.

	Another possible reason that the plate-to-plate offset is too big - 
	sometimes the so-called "fiducial marks" are printed terribly bad - we observed 
	the offsets upto 4 mm with the rotation upto 3 deg.
	In this case one can try to scan without using of the fiducials - just 
	reset stage coordinate on the angle of the plate and then use 
	AFID 0  in default.par

7) Tracking:
	> recset t XXXX_data_set.def

	ones the affine transformations are defined for N plates - for 
	all of them could be done track linking. This procedure is similar to 
	up/down linking and done for all couples of neibour plates, output 
	is written to linked_tracks.root

8) Fine alignment:
	recset f XXXX_data_set.def

	This instruction will try to do the additional corrections 
	based on straight passed-throw tracks. The par/*.par files will be updated 
	with the following cards:
	AFFXY   0
	ZLAYER  0
	AFFTXTY 0

	Note that if this procedure change significantly efficiency of 
	tracking and/or some parameters is could be a good reason to check 
	the initial settings and may be repeate the full chain of processing
	with the correct ones. 

--------------------------------------------------
VT: 22-Sep-2003
updated: 16-Oct-2003
--------------------------------------------------
