Data files organization (at Naples):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/opera/data/raws    - raw data coming from SySal  (rwd, etc)
/opera/data/rawr    - raw data after rwc2edb conversion (root files)


Internal structure of raws/ and rawr/  are identical:
/opera/data/raws/brick_name/plXX/ ... file(s) 

for example:
/opera/data/rawr/b1_jun2003/pl10/raw_Jun2003_CMOS_01010110.root


Analysis directory is organized by users per brick see as example
fedra/src/appl/jun2003/README

Analysis data flow:

raw_pl10.root (View tree inside)
	 |
	 |  recset [ ccd|l ]
	 v
data/10_001.cp.root (couples tree inside) 
	 |
	 |  recset [ a|f|t ]
	 v
linked_tracks.root  (tracks tree inside)


Concerning the details of processing refere to the file 
fedra/src/appl/jun2003/README

The structure of root files is explained in 
doc/data_structure.txt



----------------------------------------------------------------------
Some additional notes (could be laboratory dependent)
----------------------------------------------------------------------

In the data coming from SySal scanning, orientation is:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  Axis Z directed from bottom to top on the stage.
-  fiducial marks are on the bottom surface

in the data coming after rwc2edb (in EdbViews):

- top views segments and clusters has higher Z
- segments.eSide is "0" for top, "1" for bottom
- eNframesTop=0 for bottom side views
  eNframesBot=0 for top    side views

  to select top/bottom views used eNframesTop/Bot values (from the view header)


During the linking (in "couples" tree):

       - up    side data is read first as pattern 1, and segments go to s1.
       - down  side data is read next  as pattern 2, and segments go to s2.


Shrinkage correction:
~~~~~~~~~~~~~~~~~~~~~
       shrinkage = (exposure thickness) / (measured on stage thickness),  so:

       angle_exposured = angle_found/shrinkage



------------------------------------------------------------------------------
  the procedures below are OBSOLETE (new ones are in jun2003/README)
  anyway most of them should work and could serve 
  as the indication for the personal user analysis
------------------------------------------------------------------------------

Linking:
~~~~~~~~
     - link data using the script link.C
	    The parameters using for linking ( in function link() ):
	    
  float  plate[3] = {40, 214, 40};  - plate thickness parameters (up, base, down)
	                              base - is very important - it is used
				      for calculation of base angle. 
				      up and down are used only to project the base point to the 
				      center of emulsion layer - it helps to improve the 
				      accuracy of the segment position ( X0, Y0 ).
				      With setting {0,base,0} base point is used for 
				      calculations as is

  float  shrU  = 0.93;              //  (exposure thickness) / (measured on stage thickness):
  float  shrD  = 0.92;              //  tx_exp = tx_stage/shr
				    
	 shrinkage parameters are used for correction of the raw 
	 data angles after reading
	 Note that shrinkage and base thickness are correlated: first it is necessary 
	 to fix the base and then correct shrinkage if needed

  float  uOff[2] = {0.,0.};      // s1.eTX-s.eTX, s1.eTY-s.eTY  (at 0 angle)
  float  dOff[2] = {0.,0.};      // s2.eTX-s.eTX, -(s2.eTY-s.eTY)

	 angular offsets could be in the distorted emulsions

	 All the above parameters could be used to correct angular distributions
	 for minimization of chi2 for signal tracks.

	 function cut_seg(...) could be used to reject part of raw segments 
	 before linking - for example fake vertical segments due to the CCD 
	 defects (black spots). If this function, called per each segment, return 
	 0 - the segment rejected.

   ScanCond.C - expected resolutions are setted for each type of data set here.
		This parameters are very important for correct linking&alingment 
		but typically should not be tuned per each plate as it happens 
		sometimes with shrinkage and distortion corrections

Alingment:
~~~~~~~~~~
	script align.C
