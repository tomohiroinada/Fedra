Die angegbenen Operationen wurden 1*10^6 mal ausgefuehrt,
inklusive der Erzeugung der Vektoren und Matrizen.

option -O2, -funroll-loops -finline-functions

 A:
            4             0             0
            0             4             0
            0             0             4

 B:
            0             1             1
            1             1             0
            0             0             0

 C:
            0             0             2
            0             0             2
            0             0             2

 D:
            4             1             3
            1             5             2
            0             0             6

D = A + B + C

VtMatrix:

real    0m11.271s
user    0m11.290s
sys     0m0.010s

SMatrix:

real    0m0.437s
user    0m0.430s
sys     0m0.010s

D:
[         -4         1         3
           1        -3         2
           0         0        -2 ]

D = -A + B + C

VtMatrix:

real    0m13.293s
user    0m13.270s
sys     0m0.010s

SMatrix:

real    0m0.473s
user    0m0.470s
sys     0m0.010s

 D:
            4             0             4
            0             4             4
            0             0             4

D = A + B * C

VtMatrix:

real    0m12.585s
user    0m12.440s
sys     0m0.000s

SMatrix:

real    0m1.443s
user    0m1.430s
sys     0m0.000s

A:
[          4         0         0
           0         4         0
           0         0         4
           0         0         0 ]
 x: 1, 2, 3

 y = A * x

VtMatrix/VtVector:

real    0m4.458s
user    0m4.400s
sys     0m0.040s

SMatrix/SVector:

real    0m0.283s
user    0m0.280s
sys     0m0.000s


 a: 1, 2, 3, 4

 y = a + A * x

VtMatrix/VtVector:

real    0m6.957s
user    0m6.950s
sys     0m0.020s

SMatrix/SVector:

real    0m0.540s
user    0m0.530s
sys     0m0.010s

A:
[          4         0         0
           0         4         0
           0         0         4
           1         0         0 ]
B:
[          0         1         1         0
           1         1         0         0
           0         0         0         0 ]
C:
[          0         4         4
           4         4         0
           0         0         0 ]

C = B * A

SMatrix:

real    0m1.303s
user    0m1.290s
sys     0m0.010s

VtMatrix:

real    0m8.105s
user    0m8.090s
sys     0m0.010s


A:
[          4         0         0
           0         4         0
           0         0         4
           1         0         0 ]
B:
[          4         0         0         1
           0         4         0         0
           0         0         4         0 ]

 B = transpose(A)

VtMatrix:

real    0m7.294s
user    0m7.300s
sys     0m0.000s

SMatrix:

real    0m1.023s
user    0m1.020s
sys     0m0.010s


-----

A:
[          1         1         0
           1         2         0
           0         0         2 ]
x: 1, 2, 3
 x^T * A * x: 31

product(A,x)

VtMatrix:

real    0m2.578s
user    0m2.560s
sys     0m0.000s

SMatrix:

real    0m0.077s
user    0m0.070s
sys     0m0.010s

A:
[          1         1         0
           1         2         0
           0         0         2 ]
A^-1:
[          2        -1         0
          -1         1         0
           0         0       0.5 ]

A.sinvert() 

VtSymMatrix:  (CERNLIB dsinv() routine)

real    0m3.759s
user    0m3.730s
sys     0m0.010s

SMatrix:     (Dsinv(): improved dsinv())

real    0m0.848s
user    0m0.840s
sys     0m0.000s


A:
[          1         1         0
           1         2         0
           0         0         2 ]
Determinant: 2
A again:
[          1         1         0
           1         2         0
           0         0         2 ]

Det(A)

VtSymMatrix: (CERNLIB dsfact() routine)

real    0m3.011s
user    0m2.980s
sys     0m0.010s

SMatrix:     (Dsfact(): improved dsfact())

real    0m0.536s
user    0m0.530s
sys     0m0.010s

 A:
            1             1             0
            1             3             0
            0             0             3

 B:
            3             1             0
            1             1             0
            0             0             1

 x:
            1
            2
            3

 y:
            1
            2
            3

 (x+y)^T * (A+B) * (x+y): 760

VtSymMatrix:

real    0m11.333s
user    0m11.310s
sys     0m0.000s

SMatrix:

real    0m0.321s
user    0m0.310s
sys     0m0.000s

 C:
[          3         2         2
           2         3         0
           0         2         3 ]

 (x+y)^T * (A+B+C) * (x+y): 1581

VtSymMatrix:

real    0m18.275s
user    0m18.270s
sys     0m0.000s

SMatrix:

real    0m0.396s
user    0m0.390s
sys     0m0.010s

y: 1, 2
x: 0, 0, 1, 2

x.place_at(y,2)

VtVector:

real    0m1.332s
user    0m1.330s
sys     0m0.000s

SVector:

real    0m0.153s
user    0m0.140s
sys     0m0.010s


A.place_at(B,0,1)

VtMatrix:

real    0m3.406s
user    0m3.400s
sys     0m0.000s

SMatrix:

real    0m0.167s
user    0m0.160s
sys     0m0.010s

==== Time versus no of operands:

	                   |  VtMatrix   |     SMatrix  | Ratio
 --------------------------+-------------+--------------+-------
 C = A + B                 |    6.28     |      0.30    |  20.93
 D = A + B + C             |   11.25     |      0.43    |  26.16
 D = A + B + C + A         |   15.04     |      0.58    |  25.93
 D = A + B + C + A + B     |   18.26     |      0.77    |  23.71
 D = A + B + C + A + B + C |   21.29     |      0.88    |  24.19


 C:
[            3           2           2           0
             2           3           0           0
             0           2           3           2
             0           2           0           3 ]
C after:
[     0.509434   -0.264151   -0.339623    0.226415
     -0.339623    0.509434    0.226415   -0.150943
     0.0754717   -0.113208    0.283019   -0.188679
      0.226415   -0.339623   -0.150943    0.433962 ]
D = B * C:
[     1.000000    0.000000    0.000000    0.000000
      0.000000    1.000000    0.000000    0.000000
      0.000000    0.000000    1.000000   -0.000000
      0.000000    0.000000    0.000000    1.000000 ]

Dinv(C)   (Matrix inversion, calls Dfactir and Dfinv)

SMatrix before optimization:

real    0m3.146s
user    0m3.130s
sys     0m0.020s

SMatrix after optimization (???)

real    0m4.845s
user    0m4.830s
sys     0m0.000s
