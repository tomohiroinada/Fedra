#ifndef __SVECTOR_ICC
#define __SVECTOR_ICC
// ********************************************************************
//
// source:
//
// type:      source code
//
// created:   21. Mar 2001
//
// author:    Thorsten Glebe
//            HERA-B Collaboration
//            Max-Planck-Institut fuer Kernphysik
//            Saupfercheckweg 1
//            69117 Heidelberg
//            Germany
//            E-mail: T.Glebe@mpi-hd.mpg.de
//
// Description: A fixed size Vector class
//
// changes:
// 21 Mar 2001 (TG) creation
// 26 Mar 2001 (TG) added place_at()
// 06 Apr 2001 (TG) CTORS added
// 07 Apr 2001 (TG) CTORS added
// 22 Aug 2001 (TG) CTOR(T*,len) added
// 14 Jan 2002 (TG) added operator==(), operator!=(), operator>(), operator<()
//
// ********************************************************************
#include "Riostream.h"
#include <assert.h>

//==============================================================================
// Constructors
//==============================================================================
template <class T, unsigned int D>
SVector<T,D>::SVector() {
  operator=(0);
}

template <class T, unsigned int D>
template <class A>
SVector<T,D>::SVector(const Expr<A,T,D>& rhs) {
  operator=(rhs);
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const SVector<T,D>& rhs) {
  for(unsigned int i=0; i<D; ++i)
    array[i] = rhs.array[i];
}

template <class T, unsigned int D>
template <unsigned int D1>
SVector<T,D>::SVector(const SVector<T,D1>& rhs) {
  for(unsigned int i=0; i<D1; ++i)
    array[i] = rhs.array[i];
}

template <class T, unsigned int D>
template <unsigned int D1>
SVector<T,D>::SVector(const T& a1, const SVector<T,D1>& rhs) {
  array[0] = a1;
  for(unsigned int i=0; i<D1; ++i)
    array[i+1] = rhs[i];
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T* a, unsigned int len) {
  assert(len == D);
  for(unsigned int i=0; i<D; ++i)
    array[i] = a[i];
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T& rhs) {
  for(unsigned int i=0; i<D; ++i)
    array[i] = rhs;
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T& a1, const T& a2) {
  array[0] = a1; array[1] = a2;
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T& a1, const T& a2, const T& a3) {
  array[0] = a1; array[1] = a2; array[2] = a3;
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T& a1, const T& a2, const T& a3, const T& a4) {
  array[0] = a1; array[1] = a2; array[2] = a3; array[3] = a4;
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T& a1, const T& a2, const T& a3, const T& a4,
		      const T& a5) {
  array[0] = a1; array[1] = a2; array[2] = a3; array[3] = a4;
  array[4] = a5;
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T& a1, const T& a2, const T& a3, const T& a4,
		      const T& a5, const T& a6) {
  array[0] = a1; array[1] = a2; array[2] = a3; array[3] = a4;
  array[4] = a5; array[5] = a6;
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T& a1, const T& a2, const T& a3, const T& a4,
		      const T& a5, const T& a6, const T& a7) {
  array[0] = a1; array[1] = a2; array[2] = a3; array[3] = a4;
  array[4] = a5; array[5] = a6; array[6] = a7;
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T& a1, const T& a2, const T& a3, const T& a4,
		      const T& a5, const T& a6, const T& a7, const T& a8) {
  array[0] = a1; array[1] = a2; array[2] = a3; array[3] = a4;
  array[4] = a5; array[5] = a6; array[6] = a7; array[7] = a8;
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T& a1, const T& a2, const T& a3, const T& a4,
		      const T& a5, const T& a6, const T& a7, const T& a8,
		      const T& a9) {
  array[0] = a1; array[1] = a2; array[2] = a3; array[3] = a4;
  array[4] = a5; array[5] = a6; array[6] = a7; array[7] = a8;
  array[8] = a9;
}

template <class T, unsigned int D>
SVector<T,D>::SVector(const T& a1, const T& a2, const T& a3, const T& a4,
		      const T& a5, const T& a6, const T& a7, const T& a8,
		      const T& a9, const T& a10) {
  array[0] = a1; array[1] = a2; array[2] = a3; array[3] = a4;
  array[4] = a5; array[5] = a6; array[6] = a7; array[7] = a8;
  array[8] = a9; array[9] = a10;
}

//==============================================================================
// operator=
//==============================================================================
template <class T, unsigned int D>
SVector<T,D>& SVector<T,D>::operator=(const T& rhs) {
  for(unsigned int i=0; i<D; ++i) {
    array[i] = rhs;
  }
    return *this;
}

template <class T, unsigned int D>
template <class A>
SVector<T,D>& SVector<T,D>::operator=(const Expr<A,T,D>& rhs) {
  for(unsigned int i=0; i<D; ++i) {
    array[i] = rhs.apply(i);
  }
  return *this;
}

//==============================================================================
// operator==
//==============================================================================
template <class T, unsigned int D>
bool SVector<T,D>::operator==(const T& rhs) const {
  bool rc = true;
  for(unsigned int i=0; i<D; ++i) {
    rc = rc && (array[i] == rhs);
  }
  return rc;
}

template <class T, unsigned int D>
bool SVector<T,D>::operator==(const SVector<T,D>& rhs) const {
  bool rc = true;
  for(unsigned int i=0; i<D; ++i) {
    rc = rc && (array[i] == rhs.apply(i));
  }
  return rc;
}

template <class T, unsigned int D>
template <class A>
bool SVector<T,D>::operator==(const Expr<A,T,D>& rhs) const {
  bool rc = true;
  for(unsigned int i=0; i<D; ++i) {
    rc = rc && (array[i] == rhs.apply(i));
  }
  return rc;
}

//==============================================================================
// operator!=
//==============================================================================
template <class T, unsigned int D>
inline bool SVector<T,D>::operator!=(const T& rhs) const {
  return !operator==(rhs);
}

template <class T, unsigned int D>
inline bool SVector<T,D>::operator!=(const SVector<T,D>& rhs) const {
  return !operator==(rhs);
}

template <class T, unsigned int D>
template <class A>
inline bool SVector<T,D>::operator!=(const Expr<A,T,D>& rhs) const {
  return !operator==(rhs);
}

//==============================================================================
// operator>
//==============================================================================
template <class T, unsigned int D>
bool SVector<T,D>::operator>(const T& rhs) const {
  bool rc = true;
  for(unsigned int i=0; i<D; ++i) {
    rc = rc && (array[i] > rhs);
  }
  return rc;
}

template <class T, unsigned int D>
bool SVector<T,D>::operator>(const SVector<T,D>& rhs) const {
  bool rc = true;
  for(unsigned int i=0; i<D; ++i) {
    rc = rc && (array[i] > rhs.apply(i));
  }
  return rc;
}

template <class T, unsigned int D>
template <class A>
bool SVector<T,D>::operator>(const Expr<A,T,D>& rhs) const {
  bool rc = true;
  for(unsigned int i=0; i<D; ++i) {
    rc = rc && (array[i] > rhs.apply(i));
  }
  return rc;
}

//==============================================================================
// operator<
//==============================================================================
template <class T, unsigned int D>
bool SVector<T,D>::operator<(const T& rhs) const {
  bool rc = true;
  for(unsigned int i=0; i<D; ++i) {
    rc = rc && (array[i] < rhs);
  }
  return rc;
}

template <class T, unsigned int D>
bool SVector<T,D>::operator<(const SVector<T,D>& rhs) const {
  bool rc = true;
  for(unsigned int i=0; i<D; ++i) {
    rc = rc && (array[i] < rhs.apply(i));
  }
  return rc;
}

template <class T, unsigned int D>
template <class A>
bool SVector<T,D>::operator<(const Expr<A,T,D>& rhs) const {
  bool rc = true;
  for(unsigned int i=0; i<D; ++i) {
    rc = rc && (array[i] < rhs.apply(i));
  }
  return rc;
}

//==============================================================================
// operator+=
//==============================================================================
template <class T, unsigned int D>
SVector<T,D>& SVector<T,D>::operator+=(const SVector<T,D>& rhs) {
  for(unsigned int i=0; i<D; ++i) {
    array[i] += rhs.apply(i);
  }
  return *this;
}

template <class T, unsigned int D>
template <class A>
SVector<T,D>& SVector<T,D>::operator+=(const Expr<A,T,D>& rhs) {
  for(unsigned int i=0; i<D; ++i) {
    array[i] += rhs.apply(i);
  }
  return *this;
}

//==============================================================================
// operator-=
//==============================================================================
template <class T, unsigned int D>
SVector<T,D>& SVector<T,D>::operator-=(const SVector<T,D>& rhs) {
  for(unsigned int i=0; i<D; ++i) {
    array[i] -= rhs.apply(i);
  }
  return *this;
}

template <class T, unsigned int D>
template <class A>
SVector<T,D>& SVector<T,D>::operator-=(const Expr<A,T,D>& rhs) {
  for(unsigned int i=0; i<D; ++i) {
    array[i] -= rhs.apply(i);
  }
  return *this;
}

//==============================================================================
// operator*=
//==============================================================================
template <class T, unsigned int D>
SVector<T,D>& SVector<T,D>::operator*=(const SVector<T,D>& rhs) {
  for(unsigned int i=0; i<D; ++i) {
    array[i] *= rhs.apply(i);
  }
  return *this;
}

template <class T, unsigned int D>
template <class A>
SVector<T,D>& SVector<T,D>::operator*=(const Expr<A,T,D>& rhs) {
  for(unsigned int i=0; i<D; ++i) {
    array[i] *= rhs.apply(i);
  }
  return *this;
}

//==============================================================================
// operator/=
//==============================================================================
template <class T, unsigned int D>
SVector<T,D>& SVector<T,D>::operator/=(const SVector<T,D>& rhs) {
  for(unsigned int i=0; i<D; ++i) {
    array[i] /= rhs.apply(i);
  }
  return *this;
}

template <class T, unsigned int D>
template <class A>
SVector<T,D>& SVector<T,D>::operator/=(const Expr<A,T,D>& rhs) {
  for(unsigned int i=0; i<D; ++i) {
    array[i] /= rhs.apply(i);
  }
  return *this;
}


//==============================================================================
// unit
//==============================================================================
template <class T, unsigned int D>
SVector<T,D>& SVector<T,D>::unit() {
  const double len = mag(*this);
  for(unsigned int i=0; i<D; ++i) {
    array[i] /= len;
  }
  return *this;
}

//==============================================================================
// place_at
//==============================================================================
template <class T, unsigned int D>
template <unsigned int D2>
SVector<T,D>& SVector<T,D>::place_at(const SVector<T,D2>& rhs, const unsigned int row) {

  assert(row+D2 <= D);
  //  Sassert(end <= D);

  for(unsigned int i=row, j=0; j<D2; ++i,++j)
    array[i] = rhs.apply(j);
 
  return *this;
}


//==============================================================================
// place_at
//==============================================================================
template <class T, unsigned int D>
template <class A, unsigned int D2>
SVector<T,D>& SVector<T,D>::place_at(const Expr<A,T,D2>& rhs, const unsigned int row) {

  assert(row+D2 <= D);

  for(unsigned int i=row, j=0; j<D2; ++i,++j)
    array[i] = rhs.apply(j);
 
  return *this;
}

//==============================================================================
// print
//==============================================================================
template <class T, unsigned int D>
std::ostream& SVector<T,D>::print(std::ostream& os) const {
  os.setf(ios::right,ios::adjustfield);
  //  os.setf(ios::fixed);

  unsigned int i=0;
  for(; i<D-1; ++i)
    os << array[i] << ", ";
  os << array[i];
  return os;
}

//==============================================================================
// Access functions
//==============================================================================
template <class T, unsigned int D>
inline T SVector<T,D>::apply(unsigned int i) const { return array[i]; }

template <class T, unsigned int D>
inline const T* SVector<T,D>::Array() const { return array; }

template <class T, unsigned int D>
inline T* SVector<T,D>::Array() { return array; }

//==============================================================================
// Operators
//==============================================================================
template <class T, unsigned int D>
inline const T& SVector<T,D>::operator[](unsigned int i) const { return array[i]; }

template <class T, unsigned int D>
inline const T& SVector<T,D>::operator()(unsigned int i) const { return array[i]; }

template <class T, unsigned int D>
inline T& SVector<T,D>::operator[](unsigned int i) { return array[i]; }

template <class T, unsigned int D>
inline T& SVector<T,D>::operator()(unsigned int i) { return array[i]; }

//==============================================================================
// operator<<
//==============================================================================
template <class T, unsigned int D>
inline std::ostream& operator<<(std::ostream& os, const SVector<T,D>& rhs) {
  return rhs.print(os);
}

#endif
